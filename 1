import random
import math


def generate_keypair(p, q):
    # Выбор двух простых чисел p и q
    if not (is_prime(p) and is_prime(q)):
        raise ValueError("Оба числа должны быть простыми.")
    elif p == q:
        raise ValueError("p и q не могут быть одинаковыми.")

    # Вычисление значения n и phi(n)
    n = p * q
    phi = (p - 1) * (q - 1)

    # Выбор случайного целого числа e, взаимно простого с phi(n)
    e = random.randint(1, phi)
    while math.gcd(e, phi) != 1:
        e = random.randint(1, phi)

    # Вычисление значения d, обратного к e по модулю phi(n)
    d = mod_inverse(e, phi)

    # Возвращение открытого и закрытого ключей
    return ((n, e), (n, d))


def is_prime(num):
    # Проверка числа на простоту
    if num == 2:
        return True
    if num < 2 or num % 2 == 0:
        return False
    for n in range(3, int(math.sqrt(num)) + 1, 2):
        if num % n == 0:
            return False
    return True


def mod_inverse(a, m):
    # Вычисление обратного значения a по модулю m
    g, x, y = extended_gcd(a, m)
    if g != 1:
        raise ValueError("Обратного значения не существует.")
    return x % m


def extended_gcd(a, b):
    # Расширенный алгоритм Евклида для вычисления наибольшего общего делителя и коэффициентов Безу
    if a == 0:
        return (b, 0, 1)
    else:
        g, x, y = extended_gcd(b % a, a)
        return (g, y - (b // a) * x, x)


# m = #input("Введите значение переменной m: ")
# def my_function(m, e, d, n):
#     return mod_inverse(m ^ (e), n)
#
#
# def function(m, e, d, n):
#     D = mod_inverse(C ^ (d), n)


# def my_func(m, e, n):
#     C = pow(m, e)
#     C = math.fmod(C, n)
#     print('шифр: {C}')
# def my_func(e, n, d):
#
#     C = pow(m, e)
#     C = math.fmod(C, n)
#
#     # print(f'da: { math.fmod(C, n)}')
#     M = pow(C, d)
#     M = math.fmod(M, n)
#     # print(f'du: {math.fmod(C, d)}')
#
#     # decrypt, encrypt = my_func(m, e, n, d, C, M)
#     return ((C), (M))




# Пример использования
p = 5
q = 11
public_key, private_key = generate_keypair(p, q)
print('Открытый ключ:', public_key)
print('Закрытый ключ:', private_key)

# decrypt, encrypt = my_func(e, n, d)
# print('decr', decrypt)
# print('encr', encrypt)
